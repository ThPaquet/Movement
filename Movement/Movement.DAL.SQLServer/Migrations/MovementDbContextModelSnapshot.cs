// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movement.DAL.SQLServer;

#nullable disable

namespace Movement.DAL.SQLServer.Migrations
{
    [DbContext(typeof(MovementDbContext))]
    partial class MovementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Movement.Services.Entities.ActionFeu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionsFeu");
                });

            modelBuilder.Entity("Movement.Services.Entities.Borne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.ToTable("Borne");
                });

            modelBuilder.Entity("Movement.Services.Entities.Evenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("Movement.Services.Entities.InferenceTraversePieton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BorneArriveeId")
                        .HasColumnType("int");

                    b.Property<int>("BorneDepartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DureeEnSecondes")
                        .HasColumnType("tinyint");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorneArriveeId");

                    b.HasIndex("BorneDepartId");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("TypeTransportId");

                    b.ToTable("InferencesTraversePieton");
                });

            modelBuilder.Entity("Movement.Services.Entities.InferenceTraverseVehicule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("TypeTransportId");

                    b.ToTable("InferencesTraverseVehicules");
                });

            modelBuilder.Entity("Movement.Services.Entities.Intersection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Intersections");
                });

            modelBuilder.Entity("Movement.Services.Entities.TraversePieton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BorneArriveeId")
                        .HasColumnType("int");

                    b.Property<int>("BorneDepartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DureeEnSecondes")
                        .HasColumnType("tinyint");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorneArriveeId");

                    b.HasIndex("BorneDepartId");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("TypeTransportId");

                    b.ToTable("TraversesPieton");
                });

            modelBuilder.Entity("Movement.Services.Entities.TraverseVehicule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("TypeTransportId");

                    b.ToTable("TraversesVehicule");
                });

            modelBuilder.Entity("Movement.Services.Entities.TypeTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesTransport");
                });

            modelBuilder.Entity("Movement.Services.Entities.TypeUtilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesUtilisateur");
                });

            modelBuilder.Entity("Movement.Services.Entities.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeUtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeUtilisateurId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Movement.Services.Entities.Borne", b =>
                {
                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany("Bornes")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("Movement.Services.Entities.Evenement", b =>
                {
                    b.HasOne("Movement.Services.Entities.ActionFeu", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Intersection");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Movement.Services.Entities.InferenceTraversePieton", b =>
                {
                    b.HasOne("Movement.Services.Entities.Borne", "BorneArrivee")
                        .WithMany()
                        .HasForeignKey("BorneArriveeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Borne", "BorneDepart")
                        .WithMany()
                        .HasForeignKey("BorneDepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.TypeTransport", "TypeTransport")
                        .WithMany()
                        .HasForeignKey("TypeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorneArrivee");

                    b.Navigation("BorneDepart");

                    b.Navigation("Intersection");

                    b.Navigation("TypeTransport");
                });

            modelBuilder.Entity("Movement.Services.Entities.InferenceTraverseVehicule", b =>
                {
                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.TypeTransport", "TypeTransport")
                        .WithMany()
                        .HasForeignKey("TypeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");

                    b.Navigation("TypeTransport");
                });

            modelBuilder.Entity("Movement.Services.Entities.TraversePieton", b =>
                {
                    b.HasOne("Movement.Services.Entities.Borne", "BorneArrivee")
                        .WithMany()
                        .HasForeignKey("BorneArriveeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Borne", "BorneDepart")
                        .WithMany()
                        .HasForeignKey("BorneDepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.TypeTransport", "TypeTransport")
                        .WithMany()
                        .HasForeignKey("TypeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorneArrivee");

                    b.Navigation("BorneDepart");

                    b.Navigation("Intersection");

                    b.Navigation("TypeTransport");
                });

            modelBuilder.Entity("Movement.Services.Entities.TraverseVehicule", b =>
                {
                    b.HasOne("Movement.Services.Entities.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Services.Entities.TypeTransport", "TypeTransport")
                        .WithMany()
                        .HasForeignKey("TypeTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");

                    b.Navigation("TypeTransport");
                });

            modelBuilder.Entity("Movement.Services.Entities.Utilisateur", b =>
                {
                    b.HasOne("Movement.Services.Entities.TypeUtilisateur", "TypeUtilisateur")
                        .WithMany()
                        .HasForeignKey("TypeUtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeUtilisateur");
                });

            modelBuilder.Entity("Movement.Services.Entities.Intersection", b =>
                {
                    b.Navigation("Bornes");
                });
#pragma warning restore 612, 618
        }
    }
}
